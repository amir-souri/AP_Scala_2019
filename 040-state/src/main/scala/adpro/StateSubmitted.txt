// Advanced Programming, A. WÄ…sowski, IT University of Copenhagen
//
// Group number: 17
//
// AUTHOR1: Filip Dusek fidu@itu.dk
// TIME1: 10 <- how much time have you used on solving this exercise set
// (excluding reading the book, fetching pizza, and going out for a smoke)
//
// AUTHOR2: Amir Souri asou@itu.dk
// TIME2: 12 <- how much time have you used on solving this exercise set
// (excluding reading the book, fetching pizza, and going out for a smoke)
//
// AUTHOR3: Abdullah Al Maruf abma@itu.dk
// TIME3: 10 <- how much time have you used on solving this exercise set
// (excluding reading the book, fetching pizza, and going out for a smoke)
// You should work with the file by following the associated exercise sheet
// (available in PDF from the course website).
//
// This file is compiled with 'sbt compile' and tested with 'sbt test'.



////////////////////////////////////Questions///////////////////////////////////////////

// 1. we think your test for ints, does not check the weakest precondition strickly, which is n==0. 
//It chooses n between (0, 2000). The number of successful property evaluations required for 
//the property to pass is only 100 by default. Therefore, if we are a little bit lucky, it does not fail when 
//we run test. Please tell us if we are missing some things.

// 2. I copied the tests from ints to test _ints. But I got an error, when I checked the following statement:
// subsequentValuesAreDifferent ( _ints (24) _, "_ints (42)")
// the error is:
// _ must follow method; cannot follow adpro.RNG.Rand[List[Int]]
// [error]     subsequentValuesAreDifferent ( _ints (24) _, "_ints (42)")
// What does that error mean?

// 3. In exercise number 10, you wrote that each automaton generates a language of traces. 
//What do you mean by that? what does traces mean there? Could you please give us some references?

// 4. In exercise 11
// Should we define nextInt in the companion object so that we will be able to use it in state2stream as the
// first parameter for getting random integer?
// We can use adpro.RNG.nonNegativeInt(_) there but it gives us non negative random number.
//def nextInt (rng: RNG): (Int, RNG) = rng.nextInt
//lazy val random_integers = 
//state2stream(  s = State[RNG, Int]( adpro.RNG.nextInt(_) ) ) ( seed = RNG.SimpleRNG(27) )


///////////////////////////////////////////////////////////////////////////////////////////////

package adpro

trait RNG {
  def nextInt: (Int, RNG)
}

object RNG {

  case class SimpleRNG (seed: Long) extends RNG {
    def nextInt: (Int, RNG) = {
      val newSeed = (seed * 0x5DEECE66DL + 0xBL) & 0xFFFFFFFFFFFFL // `&` is bitwise AND. We use the current seed to generate a new seed.
      val nextRNG = SimpleRNG (newSeed) // The next state, which is an `RNG` instance created from the new seed.
      val n = (newSeed >>> 16).toInt // `>>>` is right binary shift with zero fill. The value `n` is our new pseudo-random integer.
      (n, nextRNG) // The return value is a tuple containing both a pseudo-random integer and the next `RNG` state.
    }
  }

  // Exercise 1 (CB 6.1)

  def nonNegativeInt (rng: RNG): (Int, RNG) = {
    val (a, rng1) = rng.nextInt
    if (a < 0) (-(a +1), rng1) else
    (a, rng1)
  }

  // Exercise 2 (CB 6.2)

  def double (rng: RNG): (Double, RNG) = {
    val (n, nextRNG) = nonNegativeInt(rng)
    (n / (Int.MaxValue.toDouble + 1), nextRNG)
  }

  // Exercise 3 (CB 6.3)

  def intDouble (rng: RNG) :((Int, Double), RNG)= {
  val (poInt, rng1) = nonNegativeInt(rng)
  val (double1, rng2) = double(rng1)
  ((poInt, double1), rng2)
  }

  def doubleInt (rng: RNG) :((Double, Int), RNG)= {
  val (poInt, rng1) = nonNegativeInt(rng)
  val (double1, rng2) = double(rng1)
  ((double1, poInt), rng2)
  }

  def boolean (rng: RNG): (Boolean, RNG) =
    rng.nextInt match { case (i,rng2) => (i%2==0,rng2) }

  // Exercise 4 (CB 6.4)

  def ints(count: Int) (rng: RNG): (List[Int], RNG) = 
  if (count == 0)
    (List(), rng)
  else {
    val (x, r1) = rng.nextInt
    val (xs, r2) = ints(count - 1)(r1)
    (x :: xs, r2)
  }

  // There is something terribly repetitive about passing the RNG along
  // every time. What could we do to eliminate some of this duplication
  // of effort?

  type Rand[+A] = RNG => (A, RNG)

  val int: Rand[Int] = _.nextInt

  def unit[A](a: A): Rand[A] =
    rng => (a, rng)

  def map[A,B](s: Rand[A])(f: A => B): Rand[B] = 
    rng => {
      val (a, rng2) = s(rng)
      (f(a), rng2)
    }

  def nonNegativeEven: Rand[Int] = map(nonNegativeInt)(i => i - i % 2)

  // Exercise 5 (CB 6.5) (Lazy is added so that the class does not fail
  // at load-time without your implementation).
  
  lazy val _double: Rand[Double] = map(double)(d => d)

  // Exercise 6 (CB 6.6)

  def map2[A,B,C](ra: Rand[A], rb: Rand[B])(f: (A, B) => C): Rand[C] = 
  rng => {
    val (a, rng1) = ra(rng)
    val (b, rng2) = rb(rng1)
    (f(a,b), rng2)
  }

  // this is given in the book

  def both[A,B](ra: Rand[A], rb: Rand[B]): Rand[(A,B)] =
    map2(ra, rb)((_, _))

  lazy val randIntDouble: Rand[(Int, Double)] = both(int, double)

  lazy val randDoubleInt: Rand[(Double, Int)] = both(double, int)

  // Exercise 7 (6.7)
  
  def sequence[A](fs: List[Rand[A]]): Rand[List[A]] = 
  fs.foldRight(unit(List.empty[A])) ((fv1, fv2acc) => map2(fv1, fv2acc)(_::_))
  
  def _ints(count: Int): Rand[List[Int]] = 
    sequence(List.fill(count)(int))
  
  def flatMap[A,B](f: Rand[A])(g: A => Rand[B]): Rand[B] = 
  rng => {
    val (a, rng1) = f(rng)
    g(a) (rng1)
  }

  def nonNegativeLessThan(n: Int): Rand[Int] = {
    flatMap(nonNegativeInt) { a =>
      val mod = a % n
      if (a + (n - 1) - mod >= 0) unit(mod)
      else nonNegativeLessThan(n)
    }
  }

}

import State._

case class State[S, +A](run: S => (A, S)) {

  // Exercise 9 (6.10)

  def map[B](f: A => B): State[S, B] = State((s: S) => {
    val (a, state1) = run(s)
    (f(a), state1)
  })

  def map2[B,C](sb: State[S, B])(f: (A, B) => C): State[S, C] = State ((s: S) => {
  val (a, state1) = run(s)
  val (b, state2) = sb.run(state1)
  (f(a,b), state2)
  })

  def flatMap[B](f: A => State[S, B]): State[S, B] = State ((s: S) => {
    val (a, state1) = run(s)
    f(a).run(state1)
  })

}

object State {
  type Rand[A] = State[RNG, A]

  def unit[S, A](a: A): State[S, A] =
    State(s => (a, s))

  // Exercise 9 (6.10) continued

  def sequence[S,A](sas: List[State[S, A]]): State[S, List[A]] = 
  sas.foldRight(unit[S, List[A]](List()))  ((sasv1, sasv2acc) => sasv1.map2(sasv2acc)(_::_))

  // This is given in the book:

  def modify[S](f: S => S): State[S, Unit] = for {
     s <- get // Gets the current state and assigns it to `s`.
     _ <- set(f(s)) // Sets the new state to `f` applied to `s`.
  } yield ()

  def get[S]: State[S, S] = State(s => (s, s))

  def set[S](s: S): State[S, Unit] = State(_ => ((), s))

  def random_int :Rand[Int] =  State (_.nextInt)

  // Exercise 10
  
  def state2stream[S,A] (s :State[S,A]) (seed :S) :Stream[A] = {
    val (a, newSeed) = s.run(seed)
    Stream.cons(a, state2stream(s)(newSeed))
  }

  // Exercise 11 (lazy is added so that the class does not crash at load time
  // before you provide an implementation).

  lazy val random_integers = 
  state2stream(State( adpro.RNG.nonNegativeInt)) (RNG.SimpleRNG(27))

  val random_integers10 = random_integers.take(10).toList

}


// vim:cc=80:foldmethod=indent:nofoldenable

