// Advanced Programming, A. WÄ…sowski, IT University of Copenhagen
//
// Group number: 17
//
// AUTHOR1: Filip Dusek fidu@itu.dk
// TIME1: _____ <- how much time have you used on solving this exercise set
// (excluding reading the book, fetching pizza, and going out for a smoke)
//
// AUTHOR2: Amir Souri asou@itu.dk
// TIME2: 12 <- how much time have you used on solving this exercise set
// (excluding reading the book, fetching pizza, and going out for a smoke)
//
// AUTHOR3: Abdullah Al Maruf abma@itu.dk
// TIME3: 10 <- how much time have you used on solving this exercise set
// (excluding reading the book, fetching pizza, and going out for a smoke)
// You should work with the file by following the associated exercise sheet
// (available in PDF from the course website).
//
// This file is compiled with 'sbt compile' and tested with 'sbt test'.

package adpro
import scala.annotation.tailrec

trait RNG {
  def nextInt: (Int, RNG)
}

object RNG {

  case class SimpleRNG (seed: Long) extends RNG {
    def nextInt: (Int, RNG) = {
      val newSeed = (seed * 0x5DEECE66DL + 0xBL) & 0xFFFFFFFFFFFFL // `&` is bitwise AND. We use the current seed to generate a new seed.
      val nextRNG = SimpleRNG (newSeed) // The next state, which is an `RNG` instance created from the new seed.
      val n = (newSeed >>> 16).toInt // `>>>` is right binary shift with zero fill. The value `n` is our new pseudo-random integer.
      (n, nextRNG) // The return value is a tuple containing both a pseudo-random integer and the next `RNG` state.
    }
  }

  // Exercise 1 (CB 6.1)
  //Integer : -2,147,483,648 to 2,147,483,647
  //Question
  // with this declaration :
  //def nonNegativeInt = (rng: RNG) => {  
  //type mismatch;
// [error]  found   : () => adpro.RNG => (Int, adpro.RNG)
// [error]  required: adpro.RNG.Rand[?]
// [error]     (which expands to)  adpro.RNG => (?, adpro.RNG)
// [error]             map2 (nonNegativeInt _,ints (n) _) {(_,_)})
// [error]                   ^

  def nonNegativeInt (rng: RNG): (Int, RNG) = {
    val (a, rng1) = rng.nextInt
    if (a < 0) (-(a +1), rng1) else
    (a, rng1)
  }

  ////////////////I define it for exercise 11///////////////////

  //def nextInt (rng: RNG): (Int, RNG) = rng.nextInt

  ///////////////////////////////////////////////////////////////


  // Exercise 2 (CB 6.2)
  //Question// Ponder for a moment: is the distribution generated by your function uniform? 
  // Are the produced Double all equally likely? No. since it does not cover all the double between 0 and 1 
  def double (rng: RNG): (Double, RNG) = {
    val (n, nextRNG) = nonNegativeInt(rng)
    (n / (Int.MaxValue.toDouble + 1), nextRNG)
    //Int.MaxValue / (Int.MaxValue.toDouble ) = 1.0  but Int.MaxValue / (Int.MaxValue.toDouble +1 ) = 0.9999999995343387
    //4.6566128730773926E-3 == 4.6566128730773926 * (10^-3) 
  }

  // Exercise 3 (CB 6.3)

  def intDouble (rng: RNG) :((Int, Double), RNG)= {
  val (poInt, rng1) = nonNegativeInt(rng)
  val (double1, rng2) = double(rng1)
  ((poInt, double1), rng2)
  }

  def doubleInt (rng: RNG) :((Double, Int), RNG)= {
  val (poInt, rng1) = nonNegativeInt(rng)
  val (double1, rng2) = double(rng1)
  ((double1, poInt), rng2)
  }

  def boolean (rng: RNG): (Boolean, RNG) =
    rng.nextInt match { case (i,rng2) => (i%2==0,rng2) }

  // Exercise 4 (CB 6.4)
  
  def ints(count: Int) (rng: RNG): (List[Int], RNG) = 
  if (count == 0)
    (List(), rng)
  else {
    val (x, r1) = rng.nextInt
    val (xs, r2) = ints(count - 1)(r1) // xs is a list[Int] since ints returns (List[Int], RNg) if you change list to stream in return type of ints, it will be a stream
    (x :: xs, r2)
  }
  // {
  //     def loop(n: Int, rng: RNG, acc: List[Int]): (List[Int], RNG) = {
  //       if (n == 0) (acc, rng)
  //       else {
  //         loop(n-1, rng.nextInt._2, (rng.nextInt._1 :: acc))
  //       }
  //     }
  //     loop(count, rng, List())
  //   }

  // There is something terribly repetitive about passing the RNG along
  // every time. What could we do to eliminate some of this duplication
  // of effort?

  type Rand[+A] = RNG => (A, RNG)

  val int: Rand[Int] = _.nextInt

  def unit[A](a: A): Rand[A] =
    rng => (a, rng)

  def map[A,B](s: Rand[A])(f: A => B): Rand[B] = 
    rng => {
      val (a, rng2) = s(rng)
      (f(a), rng2)
    }

    // def map[B](f: A => B): State[S, B] = State((s: S) => {
    //   val (a, state2) = run(s)
    //   (f(a), state2)
    // })

  def nonNegativeEven: Rand[Int] = map(nonNegativeInt)(i => i - i % 2)

  // Exercise 5 (CB 6.5) (Lazy is added so that the class does not fail
  // at load-time without your implementation).
  
  lazy val _double: Rand[Double] = map(double)(d => d)

  // Exercise 6 (CB 6.6)
  // This implementation of map2 passes the initial RNG to the first argument
  // and the resulting RNG to the second argument. It's not necessarily wrong
  // to do this the other way around, since the results are random anyway. like so:
  // rng => { 
  //   val (b, rng1) = rb(rng)
  //   val (a, rng2) = ra(rng1)
  //   (f(a,b), rng2)
  // }
  // We could even pass the initial RNG to both `ra` and `rb`, like so:
  // rng => { 
  //   val (a, rng1) = ra(rng)
  //   val (b, rng2) = rb(rng)
  //   (f(a,b), rng2)
  // } 
  //but that might
  // have unexpected results. E.g. if both arguments are `RNG.int` then we would
  // always get two of the same `Int` in the result. When implementing functions
  // like this, it's important to consider how we would test them for
  // correctness.

  def map2[A,B,C](ra: Rand[A], rb: Rand[B])(f: (A, B) => C): Rand[C] = 
  rng => { 
    val (a, rng1) = ra(rng)
    val (b, rng2) = rb(rng1)
    (f(a,b), rng2)
  }

  // this is given in the book

  def both[A,B](ra: Rand[A], rb: Rand[B]): Rand[(A,B)] =
    map2(ra, rb)((_, _))

  lazy val randIntDouble: Rand[(Int, Double)] = both(int, double)

  lazy val randDoubleInt: Rand[(Double, Int)] = both(double, int)

  // Exercise 7 (6.7)

  // def unit[A](a: A): Rand[A] =
  //   rng => (a, rng)
  //If you whant to check whether foldRight is tailrecursive, you have to looke at the your foldRight implementation
  //https://medium.com/@juntomioka/why-foldright-is-beautiful-7854ede3e133

  //Implement sequence for combining a List of transitions into a single transition. Use it
  //to reimplement the ints function you wrote before. For the latter, you can use the standard library
  //function List.fill(n)(x ) to make a list with x repeated n times.
  def sequence[A](fs: List[Rand[A]]): Rand[List[A]] =
  fs.foldRight   ( /*unit(List.empty[A])*/ unit[List[A]](List()) )     (  (fv1, fv2acc) => map2(fv1, fv2acc) (_::_) )

  //val int: Rand[Int] = _.nextInt
  def _ints(count: Int): Rand[List[Int]] = {
  //unit( List.fill(count)( SimpleRNG(50).nextInt._1 )  )
    //sequence(List.fill(count)(unit(SimpleRNG(50).nextInt._1)))
    sequence(List.fill(count)(int))
    //Question// nonNegativeInt takes a RNG as parameter but we did not provide any parameter for it.
    //How it Works? go to nonNegativeInt we changed it maybe youe understand better
    //sequence(List.fill(count)(nonNegativeInt()))


  }
  // if (count == 0)
  //   (List(), rng)
  // else {
  //   val (x, r1) = rng.nextInt
  //   val (xs, r2) = ints(count - 1)(r1)
  //   (x :: xs, r2)
  // }
  // Exercise 8 (6.8)
  //Question//
  def flatMap[A,B](f: Rand[A])(g: A => Rand[B]): Rand[B] = 
  rng => { // anonymous function that takes RNG and returns (B, RNG) which we wrapped in Rand
    val (a, rng1) = f(rng)
    g(a) (rng1)
    // val f = g(a)
    // f(rng1)
  }

  // def nonNegativeLessThan(n: Int): Rand[Int] =
  // map(nonNegativeInt) { _ % n }

  // Hint: If n is low, your solution will very rarely hit a number i smaller than n, so it is likely to generate
  //  a lot of numbers (or even loop forever) before finding one smaller than n.  It would be more efficient to 
  //  *convert* the number produced by nonNegativeInt to one that is smaller than n.  

  def nonNegativeLessThan(n: Int): Rand[Int] = {
    flatMap(nonNegativeInt) { a =>
      //you could use filter also
      val mod = a % n
      if (a + (n - 1) - mod >= 0) unit(mod)
      else nonNegativeLessThan(n)
    }
  }

}

import State._
//If it was a class, not a case class:
//value run is not a member of adpro.State[S,A]   in state2stream
//[error]     val (a, newSeed) = s.run(seed) //newstate or newseed here. NB. state can be any thing int string list ...


case class State[S, +A](run: S => (A, S)) {

  // Exercise 9 (6.10)

  // def map[A,B](s: Rand[A])(f: A => B): Rand[B] =
  //   rng => {
  //     val (a, rng2) = s(rng)
  //     (f(a), rng2)
  //   }

  def map[B](f: A => B): State[S, B] = State((s: S) => {
    val (a, state1) = run(s)
    (f(a), state1)
  })

  // def map2[A,B,C](ra: Rand[A], rb: Rand[B])(f: (A, B) => C): Rand[C] = 
  // rng => { // anonymous function
  //   val (a, rng1) = ra(rng)
  //   val (b, rng2) = rb(rng1)
  //   (f(a,b), rng2)
  // }

  def map2[B,C](sb: State[S, B])(f: (A, B) => C): State[S, C] = State ((s: S) => {
  val (a, state1) = run(s)
  val (b, state2) = sb.run(state1)
  (f(a,b), state2)
  })

  // def flatMap[A,B](f: Rand[A])(g: A => Rand[B]): Rand[B] = 
  // rng => { // anonymous function that takes RNG and returns (B, RNG) which we wrapped in Rand
  //   val (a, rng1) = f(rng)
  //   g(a) (rng1)
  //   // val f = g(a)
  //   // f(rng1)
  // }

  def flatMap[B](f: A => State[S, B]): State[S, B] = State ((s: S) => {
    val (a, state1) = run(s)
    f(a).run(state1)
  })

}

object State {
  type Rand[A] = State[RNG, A]

  def unit[S, A](a: A): State[S, A] =
    State(s => (a, s))

  // Exercise 9 (6.10) continued
  // def sequence[A](fs: List[Rand[A]]): Rand[List[A]] = 
  // fs.foldRight   (  unit(List.empty[A])     )     (  (fv1, fv2acc) => map2(fv1, fv2acc) (_::_) )
  // def unit[A](a: A): Rand[A] =
  //   rng => (a, rng)

  def sequence[S,A](sas: List[State[S, A]]): State[S, List[A]] = 
  sas.foldRight(  unit[S, List[A]] (List()))  ( (sasv1, sasv2acc) => sasv1.map2(sasv2acc)  (_::_)   )

  // This is given in the book:

  def modify[S](f: S => S): State[S, Unit] = for {
     s <- get // Gets the current state and assigns it to `s`.
     _ <- set(f(s)) // Sets the new state to `f` applied to `s`.
  } yield ()

  def get[S]: State[S, S] = State(s => (s, s))

  def set[S](s: S): State[S, Unit] = State(_ => ((), s))

  def random_int :Rand[Int] =  State (_.nextInt)

  // Exercise 10
  //case class State[S, +A](run: S => (A, S))
  def state2stream[S,A] (s :State[S,A]) (seed :S) :Stream[A] = {
    val (a, newSeed) = s.run(seed) //newstate or newseed here. NB. State or S can be any thing int string list tuple ...
    // since s is of type State[S, A] with it is a case class we can call its parameter
    //When you create a case class with parameters, the parameters are public val.
    Stream.cons(a, state2stream(s)(newSeed))
  }

  // Exercise 11 (lazy is added so that the class does not crash at load time
  // before you provide an implementation).

  //type S can be anything: Int String List Stream Tuple. here Tuple of (Int, RNG)
  
  //Question// Why I cannot pass RNG.nextInt as the first paremeter to state2stream to get a random integer?
  // The error is : value nextInt is not a member of object adpro.RNG. I want do that since our implementation
  // returns stream of non-Negative-Int random numbers not Integer random number.

  //Question// whay I cannot pas state.run(RNG.nonNegativeInt)?
  lazy val random_integers = 
  state2stream(  s = State[RNG, Int]( adpro.RNG.nonNegativeInt(_) ) ) ( seed = RNG.SimpleRNG(27) )
// state2stream(  s = State[RNG, Int]( adpro.RNG.nextInt(_) ) ) ( seed = RNG.SimpleRNG(27) )
//state2stream(  s = State[RNG, Int]( _.nextInt(_) ) ) ( seed = RNG.SimpleRNG(27) )


  //val test = RNG.SimpleRNG(4).nextInt
  //State constructor takes a function so that S => (A, S). Here requared S is RNG and A is Int.
  // If you try to call RNG.nextInt, it deoes not compile cinse nextInt is not a member method in RNG companion object.
  // You can call it like RNG.SimpleRNG.nextInt. But the problems is, to call nextInt in this way, you need first to instantiate
  // SimpleRNG like RNG.SimpleRNG(4).nextInt. Since SimpleRNG take a long value as its parameter. But now you have other 
  //problem that is, state2stream takes a State as its first parameter.
  // That is nothing but a function S => (A, S) whiles the RNG.SimpleRNG(4).nextInt is not a fuction it is a val
  // whose type is (Int, RNG) since nextInt returns a tuple of (Int, RNG).
  // To overcome this problem, you can define nextInt in the companion object like
  //def nextInt (rng: RNG): (Int, RNG) = rng.nextInt. NB. nextInt now becomes S => (A, S) and also is a member
  // method in the companion object. Therefore you can simply call it like adpro.RNG.nextInt.



 val random_integers10 = random_integers.take(10).toList



//type Rand[+A] = RNG => (A, RNG)
// def random_list[A] (n: Int) (ra: Rand[A]): Rand[List[A]] = rng => {
//   val t = List.fill(n)(_ => ra)
//   sequence(t)
//}
  


}


// vim:cc=80:foldmethod=indent:nofoldenable


